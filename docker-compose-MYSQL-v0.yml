#
# Notes for this revision of the docker-compose.yml file:
# - The MySQL service is commented out, as the MySQL database is running on a separate host.
# - The DB_HOST environment variable is set to the IP address of the host where the MySQL database is running.
# - The DB_USER and DB_PASSWORD environment variables are set to the values of the corresponding
#   environment variables in the host environment. Here are example docker-compose up commands:
#    MYSQL_DATABASE=yourdbname  DB_USER=yourusername DB_PASSWORD=yourpassword docker-compose up
#    docker-compose up -e MYSQL_DATABASE=yourdbname -e DB_USER=yourusername -e DB_PASSWORD=yourpassword
#
# - the user 'DB_USER'@'DB_HOST' must have the necessary permissions to access the 'employees' database that
#   is being accessed by the node application (the mysql service running on local machine).
# - Here are the necessary privilege commands required to be run on the MySQL database:
#     i.) GRANT ALL PRIVILEGES ON *.* TO 'DB_USER'@'DB_HOST'
#     ii.) FLUSH PRIVILEGES
#    iii.) If the user doesn't already exist, then run the following command before the GRANT:
#          CREATE USER 'DB_USER'@'DB_HOST' IDENTIFIED BY 'DB_PASSWORD'
#
# Miscellaneous notes:
# - command to find the IP address or hostname of the host machine (MacOS):
#   - ipconfig getifaddr en0
#   - scutil --get LocalHostName
#   - hostname
# - miscellaneous docker-compose commands:
#   - docker-compose build
#   - docker-compose up
#   - docker-compose down
#   - docker-compose ps
#   - docker-compose logs
#   - docker-compose exec app sh
#   - docker-compose exec sh
#   - docker-compose exec app ls
#   - docker-compose exec app curl -I
#
#   - docker-compose exec app ping -c 4 10.0.0.50
#   - docker-compose exec app mysql -h 192.168.1.100 -u root -p
#   - docker-compose exec app sh -c 'apt-get update && apt-get install -y mysql-client'
#   - docker-compose exec app mysql -h yourhostname -u yourusername -p
#
version: '3.8'

services:
  app:
    image: employee-node-ts
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:3000"
    environment:
      # - DB_HOST=10.0.0.50
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${MYSQL_DATABASE}
      - NODE_ENV=production
    depends_on:
      - db

  # The section pulls a MySQL image from Docker Hub.
  # docker-compose up would start both this node service and the MySQL service container; and
  # would require loading the employees DDL/data into the MySQL container (or restoring
  # a backup of the employees database).
  #
  db:
    image: mysql:8.4.0
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD} 
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3306:3306"
    volumes:
      - ./resources/dbsetup/mysql/entrypoint.sh:/entrypoint.sh
      - ./resources/dbsetup/mysql/initializedb.sql.template:/docker-entrypoint-initdb.d/initializedb.sql.template
      - ./resources/dbsetup/mysql/employees-backup-initial.sql:/docker-entrypoint-initdb.d/employees-backup-initial.sql
    entrypoint: ["/entrypoint.sh"]